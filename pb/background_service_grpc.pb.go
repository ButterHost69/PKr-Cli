// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/background_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BackgroundService_GetPublicKey_FullMethodName               = "/background_service.BackgroundService/GetPublicKey"
	BackgroundService_InitNewWorkSpaceConnection_FullMethodName = "/background_service.BackgroundService/InitNewWorkSpaceConnection"
	BackgroundService_GetWorkspace_FullMethodName               = "/background_service.BackgroundService/GetWorkspace"
)

// BackgroundServiceClient is the client API for BackgroundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackgroundServiceClient interface {
	// Get Public Key To Encrypt Passwords
	GetPublicKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PublicKey, error)
	// Establish / Register new User to a Workspace
	InitNewWorkSpaceConnection(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	// Request to Open a gRPC Port for Data Transfer
	GetWorkspace(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error)
}

type backgroundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackgroundServiceClient(cc grpc.ClientConnInterface) BackgroundServiceClient {
	return &backgroundServiceClient{cc}
}

func (c *backgroundServiceClient) GetPublicKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PublicKey, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicKey)
	err := c.cc.Invoke(ctx, BackgroundService_GetPublicKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundServiceClient) InitNewWorkSpaceConnection(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, BackgroundService_InitNewWorkSpaceConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundServiceClient) GetWorkspace(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkspaceResponse)
	err := c.cc.Invoke(ctx, BackgroundService_GetWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackgroundServiceServer is the server API for BackgroundService service.
// All implementations must embed UnimplementedBackgroundServiceServer
// for forward compatibility
type BackgroundServiceServer interface {
	// Get Public Key To Encrypt Passwords
	GetPublicKey(context.Context, *emptypb.Empty) (*PublicKey, error)
	// Establish / Register new User to a Workspace
	InitNewWorkSpaceConnection(context.Context, *InitRequest) (*InitResponse, error)
	// Request to Open a gRPC Port for Data Transfer
	GetWorkspace(context.Context, *WorkspaceRequest) (*GetWorkspaceResponse, error)
	mustEmbedUnimplementedBackgroundServiceServer()
}

// UnimplementedBackgroundServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBackgroundServiceServer struct {
}

func (UnimplementedBackgroundServiceServer) GetPublicKey(context.Context, *emptypb.Empty) (*PublicKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedBackgroundServiceServer) InitNewWorkSpaceConnection(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitNewWorkSpaceConnection not implemented")
}
func (UnimplementedBackgroundServiceServer) GetWorkspace(context.Context, *WorkspaceRequest) (*GetWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspace not implemented")
}
func (UnimplementedBackgroundServiceServer) mustEmbedUnimplementedBackgroundServiceServer() {}

// UnsafeBackgroundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackgroundServiceServer will
// result in compilation errors.
type UnsafeBackgroundServiceServer interface {
	mustEmbedUnimplementedBackgroundServiceServer()
}

func RegisterBackgroundServiceServer(s grpc.ServiceRegistrar, srv BackgroundServiceServer) {
	s.RegisterService(&BackgroundService_ServiceDesc, srv)
}

func _BackgroundService_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundServiceServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundService_GetPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundServiceServer).GetPublicKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundService_InitNewWorkSpaceConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundServiceServer).InitNewWorkSpaceConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundService_InitNewWorkSpaceConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundServiceServer).InitNewWorkSpaceConnection(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundService_GetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundServiceServer).GetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundService_GetWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundServiceServer).GetWorkspace(ctx, req.(*WorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackgroundService_ServiceDesc is the grpc.ServiceDesc for BackgroundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackgroundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "background_service.BackgroundService",
	HandlerType: (*BackgroundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicKey",
			Handler:    _BackgroundService_GetPublicKey_Handler,
		},
		{
			MethodName: "InitNewWorkSpaceConnection",
			Handler:    _BackgroundService_InitNewWorkSpaceConnection_Handler,
		},
		{
			MethodName: "GetWorkspace",
			Handler:    _BackgroundService_GetWorkspace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/background_service.proto",
}

const (
	DataService_GetData_FullMethodName = "/background_service.DataService/GetData"
)

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	GetData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (DataService_GetDataClient, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) GetData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (DataService_GetDataClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataService_ServiceDesc.Streams[0], DataService_GetData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dataServiceGetDataClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataService_GetDataClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type dataServiceGetDataClient struct {
	grpc.ClientStream
}

func (x *dataServiceGetDataClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	GetData(*DataRequest, DataService_GetDataServer) error
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) GetData(*DataRequest, DataService_GetDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServiceServer).GetData(m, &dataServiceGetDataServer{ServerStream: stream})
}

type DataService_GetDataServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type dataServiceGetDataServer struct {
	grpc.ServerStream
}

func (x *dataServiceGetDataServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "background_service.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetData",
			Handler:       _DataService_GetData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/background_service.proto",
}
