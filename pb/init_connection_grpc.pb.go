// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: init_connection.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InitConnectionClient is the client API for InitConnection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InitConnectionClient interface {
	VerifyOTP(ctx context.Context, in *OTP, opts ...grpc.CallOption) (*OTPResponse, error)
	ExchangeCertificates(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*CertificateResponse, error)
	GETWorkspaceinfo(ctx context.Context, in *Workspaces, opts ...grpc.CallOption) (*Workspaces, error)
}

type initConnectionClient struct {
	cc grpc.ClientConnInterface
}

func NewInitConnectionClient(cc grpc.ClientConnInterface) InitConnectionClient {
	return &initConnectionClient{cc}
}

func (c *initConnectionClient) VerifyOTP(ctx context.Context, in *OTP, opts ...grpc.CallOption) (*OTPResponse, error) {
	out := new(OTPResponse)
	err := c.cc.Invoke(ctx, "/init_connection.InitConnection/VerifyOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initConnectionClient) ExchangeCertificates(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*CertificateResponse, error) {
	out := new(CertificateResponse)
	err := c.cc.Invoke(ctx, "/init_connection.InitConnection/ExchangeCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initConnectionClient) GETWorkspaceinfo(ctx context.Context, in *Workspaces, opts ...grpc.CallOption) (*Workspaces, error) {
	out := new(Workspaces)
	err := c.cc.Invoke(ctx, "/init_connection.InitConnection/GETWorkspaceinfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InitConnectionServer is the server API for InitConnection service.
// All implementations must embed UnimplementedInitConnectionServer
// for forward compatibility
type InitConnectionServer interface {
	VerifyOTP(context.Context, *OTP) (*OTPResponse, error)
	ExchangeCertificates(context.Context, *Certificate) (*CertificateResponse, error)
	GETWorkspaceinfo(context.Context, *Workspaces) (*Workspaces, error)
	mustEmbedUnimplementedInitConnectionServer()
}

// UnimplementedInitConnectionServer must be embedded to have forward compatible implementations.
type UnimplementedInitConnectionServer struct {
}

func (UnimplementedInitConnectionServer) VerifyOTP(context.Context, *OTP) (*OTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOTP not implemented")
}
func (UnimplementedInitConnectionServer) ExchangeCertificates(context.Context, *Certificate) (*CertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCertificates not implemented")
}
func (UnimplementedInitConnectionServer) GETWorkspaceinfo(context.Context, *Workspaces) (*Workspaces, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GETWorkspaceinfo not implemented")
}
func (UnimplementedInitConnectionServer) mustEmbedUnimplementedInitConnectionServer() {}

// UnsafeInitConnectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InitConnectionServer will
// result in compilation errors.
type UnsafeInitConnectionServer interface {
	mustEmbedUnimplementedInitConnectionServer()
}

func RegisterInitConnectionServer(s grpc.ServiceRegistrar, srv InitConnectionServer) {
	s.RegisterService(&InitConnection_ServiceDesc, srv)
}

func _InitConnection_VerifyOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitConnectionServer).VerifyOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/init_connection.InitConnection/VerifyOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitConnectionServer).VerifyOTP(ctx, req.(*OTP))
	}
	return interceptor(ctx, in, info, handler)
}

func _InitConnection_ExchangeCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Certificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitConnectionServer).ExchangeCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/init_connection.InitConnection/ExchangeCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitConnectionServer).ExchangeCertificates(ctx, req.(*Certificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InitConnection_GETWorkspaceinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workspaces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitConnectionServer).GETWorkspaceinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/init_connection.InitConnection/GETWorkspaceinfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitConnectionServer).GETWorkspaceinfo(ctx, req.(*Workspaces))
	}
	return interceptor(ctx, in, info, handler)
}

// InitConnection_ServiceDesc is the grpc.ServiceDesc for InitConnection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InitConnection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "init_connection.InitConnection",
	HandlerType: (*InitConnectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyOTP",
			Handler:    _InitConnection_VerifyOTP_Handler,
		},
		{
			MethodName: "ExchangeCertificates",
			Handler:    _InitConnection_ExchangeCertificates_Handler,
		},
		{
			MethodName: "GETWorkspaceinfo",
			Handler:    _InitConnection_GETWorkspaceinfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "init_connection.proto",
}
