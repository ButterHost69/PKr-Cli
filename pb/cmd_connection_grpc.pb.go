// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: cmd_connection.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CmdConnectionClient is the client API for CmdConnection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmdConnectionClient interface {
	ExecuteCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
}

type cmdConnectionClient struct {
	cc grpc.ClientConnInterface
}

func NewCmdConnectionClient(cc grpc.ClientConnInterface) CmdConnectionClient {
	return &cmdConnectionClient{cc}
}

func (c *cmdConnectionClient) ExecuteCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/cmd_connection.CmdConnection/ExecuteCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmdConnectionServer is the server API for CmdConnection service.
// All implementations must embed UnimplementedCmdConnectionServer
// for forward compatibility
type CmdConnectionServer interface {
	ExecuteCommand(context.Context, *CommandRequest) (*CommandResponse, error)
	mustEmbedUnimplementedCmdConnectionServer()
}

// UnimplementedCmdConnectionServer must be embedded to have forward compatible implementations.
type UnimplementedCmdConnectionServer struct {
}

func (UnimplementedCmdConnectionServer) ExecuteCommand(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCommand not implemented")
}
func (UnimplementedCmdConnectionServer) mustEmbedUnimplementedCmdConnectionServer() {}

// UnsafeCmdConnectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmdConnectionServer will
// result in compilation errors.
type UnsafeCmdConnectionServer interface {
	mustEmbedUnimplementedCmdConnectionServer()
}

func RegisterCmdConnectionServer(s grpc.ServiceRegistrar, srv CmdConnectionServer) {
	s.RegisterService(&CmdConnection_ServiceDesc, srv)
}

func _CmdConnection_ExecuteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdConnectionServer).ExecuteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmd_connection.CmdConnection/ExecuteCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdConnectionServer).ExecuteCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CmdConnection_ServiceDesc is the grpc.ServiceDesc for CmdConnection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CmdConnection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cmd_connection.CmdConnection",
	HandlerType: (*CmdConnectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteCommand",
			Handler:    _CmdConnection_ExecuteCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd_connection.proto",
}
